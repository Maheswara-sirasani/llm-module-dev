Flask
 
1. 🎯 Introduction
 
Flask is a lightweight Python web framework that lets you build web applications quickly and flexibly. 
It’s “micro” but powerful, suitable for REST APIs, web portals, admin dashboards, and more.
 
📌 Features:
 
Minimalist and extensible
 
Built-in development server
 
Jinja2 templating
 
Rich ecosystem of extensions
 
Large community
 
 
2. ⚙️ Installation & Setup
 
Create a project folder:
 
mkdir flask_app && cd flask_app
python -m venv venv
source venv/bin/activate   # On Windows: venv\Scripts\activate
 
Install Flask:
 
pip install flask
 
 
3. Basic Example Of Flask App
 
flask_ex.py
 
from flask import Flask
 
router = Flask(__name__)
 
@router.route("/")
def home():
    return "Hello, Flask!"
 
if __name__ == "__main__":
    router.run(debug=True)
 
Run it:
 
python flask_ex.py
 
Visit:  http://127.0.0.1:5000

 
4. 🔁 Routing & Views
 
@router.route("/about")
def about():
    return "About Page"
 
@router.route("/user/<username>")
def user_profile(username):
    return f"User: {username}"
 
Use <int:id> for typed routes.
 
 
5. 🧩 Templates with Jinja2

Jinja2 :
 
Jinja2 is a text-based template engine.
 
It renders templates into HTML (or any text-based format) using Python variables, logic, and filters.
 
Inspired by Django’s templating engine but more Pythonic.
 
 
6. 📝 Handling Forms (Flask-WTF)
 
pip install flask-wtf
 
Configure CSRF:
 
router.config["SECRET_KEY"] = "supersecretkey"
 
Define a form:
 
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField
 
class NameForm(FlaskForm):
    name = StringField("Name")
    submit = SubmitField("Submit")
 
Use in route:
 
@router.route("/form", methods=["GET", "POST"])
def form_page():
    form = NameForm()
    if form.validate_on_submit():
        return f"Hello, {form.name.data}!"
    return render_template("form.html", form=form)
 
 
7. 🗄️ Using Databases (Flask-SQLAlchemy)
 
pip install flask-sqlalchemy
 
Setup:
 
from flask_sqlalchemy import SQLAlchemy
 
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///site.db"
db = SQLAlchemy(app)
 
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), nullable=False)
 
Create tables:
 
with app.app_context():
    db.create_all()
 
 
---
 
8. 📦 Modular Code with Blueprints
 
Structure:
 
flask_app/
│
├── app.py
└── users/
    ├── __init__.py
    └── routes.py
 
routes.py
 
from flask import Blueprint
 
users = Blueprint("users", __name__)
 
@users.route("/users")
def get_users():
    return "All users"
 
Register in app.py
 
from users.routes import users
app.register_blueprint(users)
 
 
---
 
9. 🌐 Creating REST APIs
 
from flask import jsonify
 
@app.route("/api/data")
def data():
    return jsonify({"id": 1, "name": "Flask"})
 
✅ You can use Flask-RESTful for complex APIs.
 
 
---
 
10. 🔐 Authentication with Flask-Login
 
pip install flask-login
 
Setup:
 
from flask_login import LoginManager, UserMixin
 
login = LoginManager()
login.init_app(app)
 
class User(UserMixin):
    ...
 
Use decorators:
 
from flask_login import login_required
 
@app.route("/dashboard")
@login_required
def dashboard():
    return "Private Dashboard"
 
 
---
 
11. ❗ Error Handling
 
@app.errorhandler(404)
def not_found(error):
    return render_template("404.html"), 404
 
 
---
 
12. 🚢 Deployment (Heroku & Docker)
 
Dockerfile
 
FROM python:3.11
WORKDIR /app
COPY . .
RUN pip install -r requirements.txt
CMD ["python", "app.py"]
 
Heroku
 
heroku login
heroku create
git push heroku main
 
 
---
 
13. ✅ Best Practices
 
Use environment variables for secrets (python-dotenv)
 
Keep views modular with Blueprints
 
Use Jinja2 safely (no untrusted input)
 
Separate config into a config.py file
 
Use .env for DB credentials
 
 
 
---
 
14. 📚 Conclusion & Resources
 
You’ve now seen everything from creating a Flask app to deploying it.
 
 